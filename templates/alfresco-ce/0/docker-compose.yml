# This docker-compose file will spin up an ACS cluster on a local host or on a server and it requires a minimum of 12GB Memory to distribute among containers.
# Limit container memory and assign X percentage to JVM.  There are couple of ways to allocate JVM Memory for ACS Containers
# For example: 'JAVA_OPTS: "$JAVA_OPTS -XX:+PrintFlagsFinal -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"'
# See Oracle docs (https://docs.oracle.com/javase/9/gctuning/parallel-collector1.htm#JSGCT-GUID-CAB83393-3438-44ED-98F0-D15641B43C7D).
# If the container memory is not explicitly set then the flags above will set the max heap default to 1/4 of the container's memory, which may not be ideal.
# For performance tuning, assign the container memory and give a percentage of it to the JVM.

# Using version 2 as 3 does not support resource constraint options (cpu_*, mem_* limits) for non swarm mode in Compose
version: "2"
volumes:
  alfresco_data:
    driver: ${volumedriver}
  alfresco_logs:
    driver: ${volumedriver}
  share_logs:
    driver: ${volumedriver}
  solr_data:
    driver: ${volumedriver}
  postgres_data:
    driver: ${volumedriver}
  postgres_logs:
    driver: ${volumedriver}
services:
    alfresco:
        labels:
            io.rancher.scheduler.affinity:host_label: "host=${host}"
        image: alfresco/alfresco-content-repository-community:6.2.1-A2
        mem_limit: 1g
        environment:
            JAVA_OPTS: "
                -Ddb.driver=org.postgresql.Driver
                -Ddb.username=${db_user}
                -Ddb.password=${db_pw}
                -Ddb.url=jdbc:postgresql://postgres:5432/alfresco
                -Dsolr.host=solr6
                -Dsolr.port=8983
                -Dsolr.base.url=/solr
                -Dindex.subsystem.name=solr6
                -Dshare.host=${url}
                -Dshare.port=8080
                -Dalfresco.host=localhost
                -Dalfresco.port=8080
                -Daos.baseUrlOverwrite=http://${url}:8080/alfresco/aos
                -Dmessaging.broker.url=\"failover:(nio://activemq:61616)?timeout=3000&jms.useCompression=true\"
                -Ddeployment.method=DOCKER_COMPOSE

                -DlocalTransform.core-aio.url=http://transform-core-aio:8090/

                -Dalfresco-pdf-renderer.url=http://transform-core-aio:8090/
                -Djodconverter.url=http://transform-core-aio:8090/
                -Dimg.url=http://transform-core-aio:8090/
                -Dtika.url=http://transform-core-aio:8090/
                -Dtransform.misc.url=http://transform-core-aio:8090/

                -Dcsrf.filter.enabled=false
                -Xms256m -Xmx1000m
                "
        volumes:
            - alfresco_data:/usr/local/tomcat/alf_data
            - alfresco_logs:/usr/local/tomcat/logs 

    transform-core-aio:
        labels:
            io.rancher.scheduler.affinity:host_label: "host=${host}"
        image: alfresco/alfresco-transform-core-aio:2.2.0-A4
        mem_limit: 256m
        environment:
            JAVA_OPTS: " -Xms128m -Xmx256m"
        #ports:
        #    - 8090:8090

    share:
        labels:
            io.rancher.scheduler.affinity:host_label: "host=${host}"
        image: alfresco/alfresco-share:6.2.0
        mem_limit: 1g
        environment:
            REPO_HOST: "alfresco"
            REPO_PORT: "8080"
            JAVA_OPTS: "
                -Xms512m
                -Xmx1000m
                -Dalfresco.host=localhost
                -Dalfresco.port=8080
                -Dalfresco.context=alfresco
                -Dalfresco.protocol=http
                "
        volumes:
            - share_logs:/usr/local/tomcat/logs

    postgres:
        labels:
            io.rancher.scheduler.affinity:host_label: "host=${host}"
        image: postgres:11.4
        mem_limit: 512m
        environment:
            - POSTGRES_PASSWORD=${db_user}
            - POSTGRES_USER=${db_password}
            - POSTGRES_DB=alfresco
        command: postgres -c max_connections=300 -c log_min_messages=LOG
        #ports:
        #    - 5432:5432
        volumes:
            - postgres_data:/var/lib/postgresql/data
            - postgres_logs:/var/log/postgresql

    solr6:
        labels:
            io.rancher.scheduler.affinity:host_label: "host=${host}"
        image: alfresco/alfresco-search-services:1.4.0
        mem_limit: 1g
        environment:
            #Solr needs to know how to register itself with Alfresco
            - SOLR_ALFRESCO_HOST=alfresco
            - SOLR_ALFRESCO_PORT=8080
            #Alfresco needs to know how to call solr
            - SOLR_SOLR_HOST=solr6
            - SOLR_SOLR_PORT=8983
            #Create the default alfresco and archive cores
            - SOLR_CREATE_ALFRESCO_DEFAULTS=alfresco,archive
            #HTTP by default
            - ALFRESCO_SECURE_COMMS=none
            - "SOLR_JAVA_MEM=-Xms512m -Xmx1g"
        #ports:
        #    - 8083:8983 #Browser port
        volumes:
            - solr_data:/opt/alfresco-search-services/data

    activemq:
        labels:
            io.rancher.scheduler.affinity:host_label: "host=${host}"
        image: alfresco/alfresco-activemq:5.15.8
        mem_limit: 256m
        #ports:
        #    - 8161:8161 # Web Console
        #    - 5672:5672 # AMQP
        #    - 61616:61616 # OpenWire
        #    - 61613:61613 # STOMP
            
    proxy:
        labels:
            io.rancher.scheduler.affinity:host_label: "host=${host}"
        image: alfresco/acs-community-ngnix:1.0.0
        mem_limit: 128m
        depends_on:
            - alfresco
        #ports:
        #    - 8080:8080
        links:
            - alfresco
            - share

    lb:
        image: rancher/lb-service-haproxy:v0.7.9
        ports:
            - 8080:8080/tcp
        labels:
            io.rancher.scheduler.affinity:host_label: "host=${host}"
            io.rancher.container.agent.role: environmentAdmin
            io.rancher.container.create_agent: 'true'